#!/usr/bin/env ruby
require "rubygems"
require "protobuf"
require "protobuf/message"
require "protobuf/descriptors"
require "protobuf/descriptors/google/protobuf/compiler/plugin.pb"
require "erb"

def prefix(file)
  file.package ? 
    file.package.split(".").map{ |seg| seg.capitalize + "_" }.join("") :
    ""
end

def type_label(field)
  t = Google::Protobuf::FieldDescriptorProto::Type
  case field.type
  when t::TYPE_STRING; "string"
  when t::TYPE_MESSAGE; 
    if field.type_name == ".google.protobuf.Timestamp"
      "timestamp"
    else
      "unknown"
    end
  else
    throw field
  end
end

def type(field)
  t = Google::Protobuf::FieldDescriptorProto::Type
  case field.type
  when t::TYPE_STRING; "String"
  when t::TYPE_MESSAGE; 
    if field.type_name == ".google.protobuf.Timestamp"
      "Google_Protobuf_Timestamp"
    else
      "unknown"
    end
  else
    throw field
  end
end

def caps(s)
  s.split("_").map(&:capitalize).join("")
end

def camel(s)
  c = s.split("_").map(&:capitalize).map{|seg| seg == "Id" ? "ID" : seg }.join("")
  c[0] = c[0].downcase
  c
end

def postprocess(content)
  content.gsub(/\s*\$trim\s*\$/m, '')
end

class Indexes < ::Protobuf::Enum
  define :NO_INDEX, 0
  define :PRIMARY, 1
  define :UNIQUE, 2
  define :FOREIGN, 3
  define :SIMPLE, 4
end

class AutoTimestamp < ::Protobuf::Enum
  define :NO_TIMESTAMP, 0
  define :CREATION, 1
  define :UPDATE, 2
end

class FieldIndex < ::Protobuf::Message
  required Indexes, :type, 1
end

class MessageIndex < ::Protobuf::Message
  required Indexes, :type, 1
  repeated :int32, :fields, 2
  required :string, :name, 3
end

Google::Protobuf::FieldOptions.optional FieldIndex, :index, 50003
Google::Protobuf::FieldOptions.optional AutoTimestamp, :timestamp, 50002
Google::Protobuf::MessageOptions.repeated MessageIndex, :composite_index, 50001

bindings = {}

request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode(STDIN.read)
template = ERB.new(DATA.read)
content = postprocess(template.result(binding))
file = Google::Protobuf::Compiler::CodeGeneratorResponse::File.new
file.name = "protocity.meta.swift"
file.content = content
response = Google::Protobuf::Compiler::CodeGeneratorResponse.new
response.file << file
print response.encode

__END__
import Promises
import Protocity
import Swinject
import SwinjectAutoregistration
import Foundation
import SwiftProtobuf

<%
desired = request.file_to_generate.to_set
request.proto_file.select{|f| desired.include?(f.name) }.each do |file|
  bindings[file] ||= []
  file.message_type.each do |message| 
    klass = prefix(file)+message.name
    primary_key = nil
    unique_keys = []
    foreign_keys = []
    simple_keys = []
    composite_keys = message.options && message.options.composite_index || []
    
    by_number = {}
    
    message.field.each do |field|
      by_number[field.number] = field
      index_type = field.options && field.options.index && field.options.index.type
      case index_type
      when Indexes::PRIMARY; primary_key = field
      when Indexes::UNIQUE; unique_keys << field
      when Indexes::FOREIGN; foreign_keys << field
      when Indexes::SIMPLE; simple_keys << field
      end
    end

    next unless primary_key
    
    bindings[file] << klass
    %>  
    
    class <%=klass%>Repository: Repository<<%=klass%>> {
      override func constructor(data: Data) -> <%=klass%>? {
        return try? <%=klass%>(serializedData: data)
      }
      
      <% [primary_key].each do |key| %>
        // Single
        func findBy<%=caps(key.name)%>(_ key: <%=type(key) %>) -> Promise<<%=klass%>?> {
          return self._find(Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: key))
        }

        // Multi
        func findBy<%=caps(key.name)%>(_ keys: [<%=type(key) %>]) -> Promise<[<%=klass%>?]> {
          return self._find(keys.map { key in Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: key) })
        }
                
        // Range
        func findBy<%=caps(key.name)%>s(_ range: Range<<%=type(primary_key) %>>, limit: Int = Int.max) -> Promise<[<%=klass%>]> {
          let lb = Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: range.lowerBound)
          let ub = Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: range.upperBound)
          return self._find(lb..<ub, limit: limit)
        }
      <% end %>
      <% unique_keys.each do |key| %>
        // Single
        func findBy<%=caps(key.name)%>(_ key: <%=type(key) %>) -> Promise<<%=klass%>?> {
          return self._indirectFind(Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: key))
        }

        // Multi
        func findBy<%=caps(key.name)%>(_ keys: [<%=type(key) %>]) -> Promise<[<%=klass%>?]> {
          return self._indirectFind(keys.map { key in Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: key) })
        }
                
        // Range
        func findBy<%=caps(key.name)%>s(_ range: Range<<%=type(primary_key) %>>, limit: Int = Int.max) -> Promise<[<%=klass%>]> {
          let lb = Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: range.lowerBound)
          let ub = Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key)%>: range.upperBound)
          return self._indirectFind(lb..<ub, limit: limit)
        }
      <% end %>
      
      <% composite_keys.each_with_index do |key, i| 
        subfields = key.fields.map{|n| by_number[n] }
        args = subfields.map{|f| "_ #{f.name}: #{type(f)}"}.join(", ")
        %>
        // full exact match
        func findBy<%=caps(key.name)%>(<%=args%>) -> Promise<<%=klass%>?> {
          return self._indirectFind(Keys.make("<%=klass%>", "<%=key.name%>"
          <% subfields.each do |f| %>
      $trim$ ,
      $trim$ Protocity_Key.with { $0.<%=type_label(f)%> = <%=f.name%> }
          <% end %>
          ))
        }
      <% end %>
      
      <% composite_keys.each_with_index do |key, i| 
        (key.fields.size - 1).times do |j|
          subfields = key.fields.first(j+2).map{|n| by_number[n] }.dup
          last = subfields.pop
          args = subfields.map{|f| "#{camel(f.name)}: #{type(f)}"}.join(", ")
          %>
          func findBy<%=caps(key.name)%>(<%=args%>, limit: Int = Int.max) -> Promise<[<%=klass%>]> {
            let lowerBound = Keys.make("<%=klass%>", "<%=key.name%>"
            <% subfields.each do |f| %>
        $trim$ ,
        $trim$ Protocity_Key.with { $0.<%=type_label(f)%> = <%=camel(f.name)%> }
            <% end %>
            )
            let upperBound = Keys.make("<%=klass%>", "<%=key.name%>"
            <% subfields.each do |f| %>
        $trim$ ,
        $trim$ Protocity_Key.with { $0.<%=type_label(f)%> = <%=camel(f.name)%> }
            <% end %>,
            Protocity_Key.with { $0.bytes = Data(repeating: 255, count: 16) }
            )
            return self._indirectFind(lowerBound..<upperBound, limit: limit)
          }
        <% end %>
      <% end %>
    }
    
    extension <%=klass%>: StorageMappable {
      public static func with(
          _ populator: (inout <%=klass%>) throws -> ()
        ) rethrows -> <%=klass%> {
          var message = <%=klass%>()
          message.<%=primary_key.name%> = UUID().uuidString
          try populator(&message)
          return message
        }
        
      func toValue() -> Data {
        return try! serializedData()
      } 
      
      func primaryIndex() -> Protocity_StorageKey {
          return Keys.make("<%=klass%>", "<%=primary_key.name%>", <%=type_label(primary_key) %>: self.<%=primary_key.name%>)
      }
      
      func secondaryIndexes() -> [Protocity_StorageKey] {
        var indexes: [Protocity_StorageKey]  = []
        <% unique_keys.each do |key| %>
          indexes.append(Keys.make("<%=klass%>", "<%=key.name%>", <%=type_label(key) %>: self.<%=camel(key.name)%>))
        <% end %>
        <% composite_keys.each_with_index do |key, i| 
          subfields = key.fields.map{|n| by_number[n] }
          %>
            indexes.append(Keys.make("<%=klass%>", "<%=key.name%>"
            <% subfields.each do |f| %>
        $trim$ ,
        $trim$ Protocity_Key.with { $0.<%=type_label(f)%> = self.<%=camel(f.name)%> }
            <% end %>
            ))
        <% end %>
        
        return indexes
      }
      
      static func repository() -> <%=klass%>Repository.Type {
        return <%=klass%>Repository.self
      }
    }
  <% end %>
<% end %>

<% bindings.each do |file, klasses|%>
  class <%=prefix(file)%>Binder {
    static func bind(_ container: Container) {
      <% klasses.each do |klass| %>
        container.autoregister(<%=klass%>Repository.self, initializer: <%=klass%>Repository.init)
      <% end %>
    }
  }
<% end %>