// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: keys.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Jane_Index {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var namespace: String = String()

  var subspace: String = String()

  var unique: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Jane_Key {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var string: String {
    get {
      if case .string(let v)? = _storage._value {return v}
      return String()
    }
    set {_uniqueStorage()._value = .string(newValue)}
  }

  var integer: Int64 {
    get {
      if case .integer(let v)? = _storage._value {return v}
      return 0
    }
    set {_uniqueStorage()._value = .integer(newValue)}
  }

  var float: Double {
    get {
      if case .float(let v)? = _storage._value {return v}
      return 0
    }
    set {_uniqueStorage()._value = .float(newValue)}
  }

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .timestamp(let v)? = _storage._value {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {_uniqueStorage()._value = .timestamp(newValue)}
  }

  var bytes: Data {
    get {
      if case .bytes(let v)? = _storage._value {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._value = .bytes(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case string(String)
    case integer(Int64)
    case float(Double)
    case timestamp(SwiftProtobuf.Google_Protobuf_Timestamp)
    case bytes(Data)

  #if !swift(>=4.1)
    static func ==(lhs: Jane_Key.OneOf_Value, rhs: Jane_Key.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.string(let l), .string(let r)): return l == r
      case (.integer(let l), .integer(let r)): return l == r
      case (.float(let l), .float(let r)): return l == r
      case (.timestamp(let l), .timestamp(let r)): return l == r
      case (.bytes(let l), .bytes(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Jane_StorageKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var namespace: String {
    get {return _storage._namespace}
    set {_uniqueStorage()._namespace = newValue}
  }

  var subspace: String {
    get {return _storage._subspace}
    set {_uniqueStorage()._subspace = newValue}
  }

  var key: [Jane_Key] {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  var uniqueBy: Jane_Key {
    get {return _storage._uniqueBy ?? Jane_Key()}
    set {_uniqueStorage()._uniqueBy = newValue}
  }
  /// Returns true if `uniqueBy` has been explicitly set.
  var hasUniqueBy: Bool {return _storage._uniqueBy != nil}
  /// Clears the value of `uniqueBy`. Subsequent reads from it will return its default value.
  mutating func clearUniqueBy() {_uniqueStorage()._uniqueBy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "jane"

extension Jane_Index: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Index"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "namespace"),
    20: .same(proto: "subspace"),
    30: .same(proto: "unique"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 10: try decoder.decodeSingularStringField(value: &self.namespace)
      case 20: try decoder.decodeSingularStringField(value: &self.subspace)
      case 30: try decoder.decodeSingularBoolField(value: &self.unique)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 10)
    }
    if !self.subspace.isEmpty {
      try visitor.visitSingularStringField(value: self.subspace, fieldNumber: 20)
    }
    if self.unique != false {
      try visitor.visitSingularBoolField(value: self.unique, fieldNumber: 30)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jane_Index, rhs: Jane_Index) -> Bool {
    if lhs.namespace != rhs.namespace {return false}
    if lhs.subspace != rhs.subspace {return false}
    if lhs.unique != rhs.unique {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jane_Key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Key"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "string"),
    2: .same(proto: "integer"),
    3: .same(proto: "float"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "bytes"),
  ]

  fileprivate class _StorageClass {
    var _value: Jane_Key.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._value = .string(v)}
        case 2:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._value = .integer(v)}
        case 3:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._value = .float(v)}
        case 4:
          var v: SwiftProtobuf.Google_Protobuf_Timestamp?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .timestamp(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .timestamp(v)}
        case 5:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._value = .bytes(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .string(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      case .integer(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      case .float(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      case .timestamp(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .bytes(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jane_Key, rhs: Jane_Key) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jane_StorageKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StorageKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "namespace"),
    20: .same(proto: "subspace"),
    30: .same(proto: "key"),
    40: .standard(proto: "unique_by"),
  ]

  fileprivate class _StorageClass {
    var _namespace: String = String()
    var _subspace: String = String()
    var _key: [Jane_Key] = []
    var _uniqueBy: Jane_Key? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _namespace = source._namespace
      _subspace = source._subspace
      _key = source._key
      _uniqueBy = source._uniqueBy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 10: try decoder.decodeSingularStringField(value: &_storage._namespace)
        case 20: try decoder.decodeSingularStringField(value: &_storage._subspace)
        case 30: try decoder.decodeRepeatedMessageField(value: &_storage._key)
        case 40: try decoder.decodeSingularMessageField(value: &_storage._uniqueBy)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._namespace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._namespace, fieldNumber: 10)
      }
      if !_storage._subspace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subspace, fieldNumber: 20)
      }
      if !_storage._key.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._key, fieldNumber: 30)
      }
      if let v = _storage._uniqueBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jane_StorageKey, rhs: Jane_StorageKey) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._namespace != rhs_storage._namespace {return false}
        if _storage._subspace != rhs_storage._subspace {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._uniqueBy != rhs_storage._uniqueBy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
